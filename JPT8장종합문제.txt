Q1.
>>> str = "a:b:c:d"
>>> str=str.split(':')
>>> str = ''.join(str)
>>> result='#'.join(str)
>>> print(result)
a#b#c#d

!! 중간에 str=''join.(str)부분은 생략해도 된다.
바로 "#".join(str)을 해도 된다.
----------------
>>> a="a:b:c:d"
>>> b=a.split(':')
>>> print(b)
['a', 'b', 'c', 'd']
>>> c = "#".join(b)
>>> print(c)
a#b#c#d

!! split함수를 통해 ':'를 기준으로 하여 기존 문자열은 리스트 형식으로 쪼개진다.
그 후 join 함수를 통해 #을 대입해주고, 기존 리스트가 문자열로 변한다.



Q2.
a = {'A':90, 'B':80}
try:
    a['C']
except IndexError:
    pass
finally:
    a['C'] = 70
    print(a)

!! a['C']로 인해 인덱스 에러가 발생하면,
finally문에서 a['C']에 70 값이 대입된다.

-------------------
>>> a={'A':90, 'B':80}
>>> a.get('C', 70)
70

!! try, except문을 이용하는 프로그램으로 이해했지만,
딕셔너리에서 key값을 통해 value를 얻는 방법을 물어보는 문제였다.
get 함수를 사용하면 key값에 대응하는 value값을 돌려주는 함수다.



Q3.
a =a+[4,5]는 a리스트와 [4,5]리스트를 합치는 것이다. 
즉, 두 개의 리스트를 하나의 리스트로 합친다.
a.extend([4,5])는 기존 a리스트에 [4,5]리스트를 추가하는 것이다.
즉, 기존 리스트에 새로운 요소를 추가하는 것이다.

-------------------
더하기: 두 개의 리스트를 합친 "새로운" 리스트가 만들어진다.(새로운 주소 생성됨)
extend: 기존 리스트에 값이 추가되기 때문에 주소가 바뀌지 않음



Q4.
A = [20, 55, 67, 82, 45, 33, 90, 87, 100, 25]
A=list(filter(lambda a: a>50, A))
print("50 이상의 수로 이루어진 리스트:", A)

result = 0
result = sum(A)
print("리스트 요소의 합:", result)

!!
50이상의 수만 리스트A에 담는 람다함수를 만들고, 
함수와 리스트를 묶고 실행하는 filter 함수를 썼다.
그 후 리스트 타입으로 반환하도록 list 함수로 다시 한 번 묶었다.

sum은 리스트나 튜플에 있는 모든 요소의 합을 더하는 함수다.
sum을 통해 리스트A에 있는 요소를 모두 더해서 result변수에 저장하도록 만들었다.

---------------------

>>> A = [20, 55, 67, 82, 45, 33, 90, 87, 100, 25]
>>> result=0
>>> while A:
...     mark = A.pop()
...     if mark >=50:
...             result += mark
...
>>> print(result)
481

!! pop을 이용하여 리스트 속 요소를 하나씩 꺼내고, 
50이 넘는 경우만 result에 더하는 프로그램.
그 후 result를 출력한다.



Q5. 미완.
result =0
def Fibonacci(n):
    for i in range(0, ):
        print("%d, "%i)
        result = i
        result += i 
        print("%d, "%result)
        if result > n: break
        
n = input("정수 n을 입력하시오: ")
Fibonacci(n)

!! 머리 아파서 포기한 문제...
 
---------------------------

*피보나치 수열 원리*
fib(0) → 0 반환
fib(1) → 1 반환
fib(2) → fib(0) + fib(1) → 0 + 1 → 1 반환
fib(3) → fib(1) + fib(2) → 1 + 1 → 2 반환
fib(4) → fib(2) + fib(3) → 1 + 2 → 3 반환

!!fib(0)과 fib(1)은 고정된 수. fib(0)=0, fib(1)=1.
fib(2)부터는 fib(n) = fib(n-1)+fib(n-2)가 된다. 

#재귀함수 사용: 무한히 자신을 호출 
def fib(n):
    if n == 0: return 0
    if n == 1: return 1
    return fib(n-2) + fib(n-1)

for i in range(10): #재귀함수를 사용하려면 끝나는 범위를 지정해줘야한다.
    print(fib(i))


Q6. 미완
result = 0
for i in range(0, 6):
    n = map(int, input('숫자를 입력하시오: ').split(','))
    result += n

print(result)

!! 콤마를 통해 숫자를 입력 받는 방법을 몰랐다.
 
-------------------------
user_input = input("숫자를 입력하세요: ")
numbers = user_input.split(",")
total = 0
for n in numbers:
    total += int(n)    # 입력은 문자열이므로 숫자로 변환해야 한다.
print(total)

!! user_input 변수에 숫자를 입력받는다. 
콤마를 기준으로 user_input 변수를 쪼개고, 
쪼개진 숫자 리스트를 numbers 변수에 저장한다.
for문을 통해 리스트 속 숫자 요소를 정수 변환 후 더한다. 



Q7.
n = int(input("구구단을 출력할 숫자를 입력하세요(2~9): "))
for i in range(1, 10):
    print((n*i), end=' ')

!! input으로 입력받은 것은 str 타입이 되기 때문에 바로 int형으로 변환하도록 한다.
한 줄로 출력하기 위해 end=' '를 사용하여 공백문자를 마지막에 출력한다.

---------------------

user_input = input("구구단을 출력할 숫자를 입력하세요(2~9):")
dan = int(user_input)       # 입력 문자열을 숫자로 변환
for i in range(1, 10):
    print(i*dan, end= ' ')  # 한 줄로 출력하기 위해 줄 바꿈 문자 대신 공백 문자를 마지막에 출력한다. 

!! 입력받은 후 정수로 변환하여 dan에 저장. 
그 후 출력



Q8. 미완
f = open("abc.txt", 'r')
content = f.read()
print(content)
f.close()

!! 파일 속 문자들을 읽고 출력하도록 만들었다.
역순으로 문자를 재정렬하는 방법을 모르겠다.
read()는 파일 내용 전체를 문자열로 돌려준다.

-------------

f = open('abc.txt', 'r')
lines = f.readlines()    # 모든 라인을 읽음
f.close()

lines.reverse()          # 읽은 라인을 역순으로 정렬

f = open('abc.txt', 'w')
for line in lines:
    line = line.strip()  # 포함되어 있는 줄 바꿈 문자 제거
    f.write(line)
    f.write('\n')        # 줄 바꿈 문자 삽입
f.close()


!!
readlines는 각각의 줄을 요소로 갖는 리스트로 값을 돌려준다.
lines에는 ["AAA\n", "BBB\n", ...] 이런식으로 저장되어있다.
reverse 함수를 통해 역순으로 재정렬한다.
그리고 이 리스트를 파일에 쓴다.



Q9. 안푼 문제 
-------------------------------------
f = open('sample.txt', 'r')
lines = f.readlines()    # 모든 라인을 읽음
f.close()

total=0
for line in lines:
    score = int(line) # 더하기 위해 정수형으로 바꾸기
    total += score

avg = total/len(lines)

f=open("result.txt", "w")
f.write(str(avg)) # 파일에 쓰기 위해서는 str 형태여야 한다.
f.close()



Q10. 안푼 문제 
-------------------------------------

Q11. 안푼 문제 
-------------------------------------


Q12.
5
이유: "a"+1에서 타입 에러가 발생 하여 result 값은 1이 되,
finally문을 통해 result값에 4가 더해져 결과적으로 5가 된다.

Q13.

Q14.

Q15.

Q16.

Q17.
2번.
'a' + '.이 세개 이상' + b란 뜻이다.

Q18.
m.start() = 2
m.end() = 7
즉, 9

Q19.
import re

data = """
park 010-9999-9988
kim 010-9909-7789
lee 010-8789-7768
"""

p=re.compile(r"\w+\s+\d+[-]\d+[-](?P<number>\d+)")
m=p.search()

Q20.
import re

p=re.compile(".*[@].*[.].*$")
m=p.search()
