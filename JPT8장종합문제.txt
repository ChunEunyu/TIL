Q1.
>>> str = "a:b:c:d"
>>> str=str.split(':')
>>> str = ''.join(str)
>>> result='#'.join(str)
>>> print(result)
a#b#c#d

!! 중간에 str=''join.(str)부분은 생략해도 된다.
바로 "#".join(str)을 해도 된다.
----------------
>>> a="a:b:c:d"
>>> b=a.split(':')
>>> print(b)
['a', 'b', 'c', 'd']
>>> c = "#".join(b)
>>> print(c)
a#b#c#d

!! split함수를 통해 ':'를 기준으로 하여 기존 문자열은 리스트 형식으로 쪼개진다.
그 후 join 함수를 통해 #을 대입해주고, 기존 리스트가 문자열로 변한다.



Q2.
a = {'A':90, 'B':80}
try:
    a['C']
except IndexError:
    pass
finally:
    a['C'] = 70
    print(a)

!! a['C']로 인해 인덱스 에러가 발생하면,
finally문에서 a['C']에 70 값이 대입된다.

-------------------
>>> a={'A':90, 'B':80}
>>> a.get('C', 70)
70

!! try, except문을 이용하는 프로그램으로 이해했지만,
딕셔너리에서 key값을 통해 value를 얻는 방법을 물어보는 문제였다.
get 함수를 사용하면 key값에 대응하는 value값을 돌려주는 함수다.



Q3.
a =a+[4,5]는 a리스트와 [4,5]리스트를 합치는 것이다. 
즉, 두 개의 리스트를 하나의 리스트로 합친다.
a.extend([4,5])는 기존 a리스트에 [4,5]리스트를 추가하는 것이다.
즉, 기존 리스트에 새로운 요소를 추가하는 것이다.

-------------------
더하기: 두 개의 리스트를 합친 "새로운" 리스트가 만들어진다.(새로운 주소 생성됨)
extend: 기존 리스트에 값이 추가되기 때문에 주소가 바뀌지 않음



Q4.
A = [20, 55, 67, 82, 45, 33, 90, 87, 100, 25]
A=list(filter(lambda a: a>50, A))
print("50 이상의 수로 이루어진 리스트:", A)

result = 0
result = sum(A)
print("리스트 요소의 합:", result)

!!
50이상의 수만 리스트A에 담는 람다함수를 만들고, 
함수와 리스트를 묶고 실행하는 filter 함수를 썼다.
그 후 리스트 타입으로 반환하도록 list 함수로 다시 한 번 묶었다.

sum은 리스트나 튜플에 있는 모든 요소의 합을 더하는 함수다.
sum을 통해 리스트A에 있는 요소를 모두 더해서 result변수에 저장하도록 만들었다.

---------------------

>>> A = [20, 55, 67, 82, 45, 33, 90, 87, 100, 25]
>>> result=0
>>> while A:
...     mark = A.pop()
...     if mark >=50:
...             result += mark
...
>>> print(result)
481

!! pop을 이용하여 리스트 속 요소를 하나씩 꺼내고, 
50이 넘는 경우만 result에 더하는 프로그램.
그 후 result를 출력한다.



Q5. 미완.
result =0
def Fibonacci(n):
    for i in range(0, ):
        print("%d, "%i)
        result = i
        result += i 
        print("%d, "%result)
        if result > n: break
        
n = input("정수 n을 입력하시오: ")
Fibonacci(n)

!! 머리 아파서 포기한 문제...
 
---------------------------

*피보나치 수열 원리*
fib(0) → 0 반환
fib(1) → 1 반환
fib(2) → fib(0) + fib(1) → 0 + 1 → 1 반환
fib(3) → fib(1) + fib(2) → 1 + 1 → 2 반환
fib(4) → fib(2) + fib(3) → 1 + 2 → 3 반환

!!fib(0)과 fib(1)은 고정된 수. fib(0)=0, fib(1)=1.
fib(2)부터는 fib(n) = fib(n-1)+fib(n-2)가 된다. 

#재귀함수 사용: 무한히 자신을 호출 
def fib(n):
    if n == 0: return 0
    if n == 1: return 1
    return fib(n-2) + fib(n-1)

for i in range(10): #재귀함수를 사용하려면 끝나는 범위를 지정해줘야한다.
    print(fib(i))


Q6. 미완
result = 0
for i in range(0, 6):
    n = map(int, input('숫자를 입력하시오: ').split(','))
    result += n

print(result)

!! 콤마를 통해 숫자를 입력 받는 방법을 몰랐다.
 
-------------------------
user_input = input("숫자를 입력하세요: ")
numbers = user_input.split(",")
total = 0
for n in numbers:
    total += int(n)    # 입력은 문자열이므로 숫자로 변환해야 한다.
print(total)

!! user_input 변수에 숫자를 입력받는다. 
콤마를 기준으로 user_input 변수를 쪼개고, 
쪼개진 숫자 리스트를 numbers 변수에 저장한다.
for문을 통해 리스트 속 숫자 요소를 정수 변환 후 더한다. 



Q7.
n = int(input("구구단을 출력할 숫자를 입력하세요(2~9): "))
for i in range(1, 10):
    print((n*i), end=' ')

!! input으로 입력받은 것은 str 타입이 되기 때문에 바로 int형으로 변환하도록 한다.
한 줄로 출력하기 위해 end=' '를 사용하여 공백문자를 마지막에 출력한다.

---------------------

user_input = input("구구단을 출력할 숫자를 입력하세요(2~9):")
dan = int(user_input)       # 입력 문자열을 숫자로 변환
for i in range(1, 10):
    print(i*dan, end= ' ')  # 한 줄로 출력하기 위해 줄 바꿈 문자 대신 공백 문자를 마지막에 출력한다. 

!! 입력받은 후 정수로 변환하여 dan에 저장. 
그 후 출력



Q8. 미완
f = open("abc.txt", 'r')
content = f.read()
print(content)
f.close()

!! 파일 속 문자들을 읽고 출력하도록 만들었다.
역순으로 문자를 재정렬하는 방법을 모르겠다.
read()는 파일 내용 전체를 문자열로 돌려준다.

-------------

f = open('abc.txt', 'r')
lines = f.readlines()    # 모든 라인을 읽음
f.close()

lines.reverse()          # 읽은 라인을 역순으로 정렬

f = open('abc.txt', 'w')
for line in lines:
    line = line.strip()  # 포함되어 있는 줄 바꿈 문자 제거
    f.write(line)
    f.write('\n')        # 줄 바꿈 문자 삽입
f.close()


!!
readlines는 각각의 줄을 요소로 갖는 리스트로 값을 돌려준다.
lines에는 ["AAA\n", "BBB\n", ...] 이런식으로 저장되어있다.
reverse 함수를 통해 역순으로 재정렬한다.
그리고 이 리스트를 파일에 쓴다.



Q9. 안푼 문제 
-------------------------------------
f = open('sample.txt', 'r')
lines = f.readlines()    # 모든 라인을 읽음
f.close()

total=0
for line in lines:
    score = int(line) # 더하기 위해 정수형으로 바꾸기
    total += score

avg = total/len(lines)

f=open("result.txt", "w")
f.write(str(avg)) # 파일에 쓰기 위해서는 str 형태여야 한다.
f.close()



Q10. 안푼 문제 
-------------------------------------
class Calculator:
    def __init__(self, numberList): #기본 지정
        self.numberList = numberList # 리스트를 입력 받음

    def sum(self):
        result=0
        for num in self.numberList:
            result += num
        return result

    def avg(self):
        total = self.sum() #위 sum 함수를 통해 더한 값을 대입
        return total/len(self.numberList)

cal1 = Calculator([1,2,3,4,5])
print(cal1.sum())
print(cal1.avg())

cal2 = Calculator([6,7,8,9,10])
print(cal2.sum())
print(cal2.avg())



Q11. 안푼 문제 
-------------------------------------
1. sys 모듈 사용하기
>>> import sys
>>> sys.path.append("c:\doit") # sys.path에 doit 디렉터리 추가
>>> import mymod # mymod 모듈 사용 가능

2. PYTHONPATH 환경 변수 사용하기
C:\Users\home>set PYTHONPATH=c:\doit # 디렉토리 지정
C:\Users\home>python # 파이썬 사용
>>> import mymod

3. 현재 디렉터리 사용하기
C:\Users\home>cd c:\doit
C:\doit>python
>>> import mymod # 모듈 사용



Q12.
5
이유: "a"+1에서 타입 에러가 발생 하여 result 값은 1이 되어,
finally문을 통해 result값에 4가 더해져 결과적으로 5가 된다.
----------------------

7
이유: [1,2,3][3] 문장 수행 시 IndexError 발생
3+4 = 7

!! [1,2,3][3]이 2차원 배열 이런 건 줄....

Q13.
data = "4546793"
numbers = list(map(int, data)) # 숫자 문자열을 숫자 리스트로 변경
result =[]

for i, num in enumerate(numbers): # i는 인덱스 번호 
    result.append(str(num)) # 문자열 변환 후 저장 
    if i < len(numbers)-1:                   # 다음 수가 있다면
        is_odd = num % 2 == 1                # 현재 수가 홀수
        is_next_odd = numbers[i+1] % 2 == 1  # 다음 수가 홀수
        if is_odd and is_next_odd:           # 연속 홀수
            result.append("-")
        elif not is_odd and not is_next_odd: # 연속 짝수
            result.append("*")

print("".join(result)) # 문자열 출력 

!! 연속 홀수면 두 수 사이에 '-'를, 연속 짝수면 두 수 사이에 '*'를.
1. 홀수 짝수를 알기 위해 숫자 리스트를 만든다.
2. 숫자가 반복될 때마다 숫자를 문자열로 result 리스트에 대입한다.
3. 해당 인덱스가 홀수인 경우와 다음 인덱스가 홀수인 경우를 확인한다.
4. 연속 홀수의 경우: -, 연속 짝수의 경우: *

** and와 and not **
**enumerate**  

Q14. 안풀음
------------------------
def compress_string(s):
    _c = "" # 이전 문자를 저장하는 변수 
    cnt = 0  # 중복 카운트를 저장하는 변수
    result = "" # 결과 문자열

    for c in s: # 문자열 중복 검사하기 
        if c!=_c:  # 현재 문자가 이전 문자와 다른 경우
            _c = c # 현재 문자를 이전 문자 변수에 대입
            if cnt: result += str(cnt) # 이전 문자 중복 기록 : 중복카운트된 수를 문자형으로 변환하고 result 문자열에 추가
            result += c # 결과 문자열에 현재 문자를 대입하기
            cnt = 1 # 현재 문자의 중복 카운트는 1이 된다
        else: # 현재 문자가 이전 문자와 같은 경우
            cnt +=1 # 카운트 변수에 1 더하기

    if cnt: result += str(cnt) # 맨 마지막 문자 카운트 출력하기 
    return result

print(compress_string("aaabbcccccca"))  # a3b2c6a1 출력




Q15.안풀음
------------------------
def chkDupNum(s):
    result = []
    for num in s: 
        if num not in result:   # result 리스트에 없는 수
            result.append(num)  # result 리스트에 추가
        else:                   # result 리스트에 있는 수
            return False        # False
    return len(result) == 10    # result 요소 개수가 10개면 True

print(chkDupNum("0123456789"))      # True 리턴
print(chkDupNum("01234"))           # False 리턴
print(chkDupNum("01234567890"))     # False 리턴
print(chkDupNum("6789012345"))      # True 리턴
print(chkDupNum("012322456789"))    # False 리턴

!! 중복없는 0~9면 True
중복 없는 수열이어도 10개의 개수가 아니면 False




Q16.안풀음
------------------------
문자와 문자 사이는 공백 1개, 단어와 단어 사이는 공백 2개로 구분

dic = {
    '.-':'A','-...':'B','-.-.':'C','-..':'D','.':'E','..-.':'F',
    '--.':'G','....':'H','..':'I','.---':'J','-.-':'K','.-..':'L',
    '--':'M','-.':'N','---':'O','.--.':'P','--.-':'Q','.-.':'R',
    '...':'S','-':'T','..-':'U','...-':'V','.--':'W','-..-':'X',
    '-.--':'Y','--..':'Z'
}

def morse(src):
    result = []
    for word in src.split("  "): # 단어 단위로 리스트에 저장하기
        for char in word.split(" "): # 단어들을 문자 단위로 저장하기
            result.append(dic[char]) # key에 해당하는 value값을 result 리스트에 저장하기
        result.append(" ") # 단어 하나가 끝나면 공백 1개를 리스트에 저장하기
    return "".join(result) # 문자열로 결괏값 반환


print(morse('.... .  ... .-.. . . .--. ...  . .- .-. .-.. -.--'))

!! 모스부호를 알파벳 문장으로 변환하는 프로그램
1. 딕셔너리를 만들어 모스부호와 알파벳을 저장한다.
2. 모스부호 문장을 단어 단위로 쪼갠다.
3. 각 단어를 문자 단위로 쪼갠다.
4. 문자 단위의 모스 부호를 알파벳으로 변환하여 리스트에 저장한다.
5. 한 단어의 변환이 끝나면 리스트에 공백 1개를 저장한다.
 


Q17.

2번.
'a' + '.이 세개 이상' + b란 뜻이다.
------------------
풀이 
import re
p = re.compile("a[.]{3,}b") # [.]은 점 문자 그 자체 
print(p.match("acccb"))    # None
print(p.match("a....b"))   # 매치 객체 출력
print(p.match("aaab"))     # None
print(p.match("a.cccb"))   # None



Q18.
m.start() = 2
m.end() = 7
즉, 9
---------------------
오답 풀이
import re

p = re.compile('[a-z]+')
m = p.search("5 python")
print(m.start() + m.end())  # 2 + 8 = 10 출력


>>> a = "5 python"
>>> a[2:8]
'python'
>>> a[2:7]
'pytho'

!! m.end()가 7이 아닌 8인 이유:
슬라이싱 할 때와 같은 원리. 시작은 기존 인덱스와 같지만, 
슬라이싱처럼 끝 문자는 +1 한다.
m.span()을 해보면 마찬가지로 (2,8)이라는 결과가 나온다.



Q19. 미완 
import re

data = """
park 010-9999-9988
kim 010-9909-7789
lee 010-8789-7768
"""

p=re.compile(r"\w+\s+\d+[-]\d+[-](?P<number>\d+)")
m=p.search()

!! 뒷자리를 바꾸는 함수 사용법을 몰랐다.
--> 백슬래시를 쓰지 않는 문장이니 굳이 r을 쓸 필요 없음
d+ 이런식으로 쓰기보단 d{3} 이런식으로 바꾸는 게 낫다.
문자열을 바꾸는 방법은 sub 메서드를 이용하면 된다.

--------------------------------------
풀이
import re

s = """
park 010-9999-9988
kim 010-9909-7789
lee 010-8789-7768
"""

pat = re.compile("(\d{3}[-]\d{4})[-]\d{4}") # (숫자3개-숫자4개)-숫자4개
result = pat.sub("\g<1>-####", s) # 뒤 네자리 숫자를 암호화하기 

print(result)

!!sub 메서드는 문자열을 바꾸는 메서드.
바꾸고자 하는 전화번호 부분만 컴파일해도 된다.
전화번호 마지막 부분만 바꾸면 된다.
정규식을 괄호로 묶어 놓으면, sub을 사용할 때 \g<1>, \g<2> 이런식으로
표현하기 편하다.
위 식에서는 (010-????) 부분을 괄호로 묶었다.
(010-????)이 \g<1>이 되고 나머지 뒤 부분은 -####으로 바꾸면 된다.

------
응용
1.
import re

s = """
park 010-9999-9988
kim 010-9909-7789
lee 010-8789-7768
"""

pat = re.compile("(?P<former>\d{3}[-]\d{4}[-])(?P<number>\d{4})")
result = pat.sub("\g<former>####", s)

print(result)

2. 
import re

s = """
park 010-9999-9988
kim 010-9909-7789
lee 010-8789-7768
"""

pat = re.compile("(?P<former>\d{3}[-]\d{4}[-])\d{4}")
result = pat.sub("\g<former>####", s)

print(result)



Q20. 미완성
import re

p=re.compile(".*[@].*[.].*$")
m=p.search()

!! 이메일 뒷자리 검사하는 방법을 몰라서 미완성  
-----------------
import re

pat = re.compile(".*[@].*[.](?=com$|net$).*$") # ~@~.com or ~@~.net
# match는 문자열의 처음부터 정규식과 매치되는 지 조사하기
print(pat.match("pahkey@gmail.com")) # True
print(pat.match("kim@daum.net")) # True
print(pat.match("lee@myhome.co.kr")) # False

!! .*$는 파일로 치면 확장자를 의미한다.