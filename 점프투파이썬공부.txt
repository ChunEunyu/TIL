<1장>
인터프리터 언어 - 한 줄 씩 소스 코드를 해석해서 그때그때 결과를 확인

특징: 1.인간답고 직관적이다 
2. 뼈대는 파이썬으로 만들고, 빠른 실행이 필요한 부분은 C로 만들면 찰떡
3. 유지 보수와 공동작업이 쉬움
4. 괄호없이 줄을 잘 맞추어야하는 언어 
5. 개발속도가 빠르다

파이썬으로 할 수 있는 일: 
1. 시스템유틸리티 2.GUI 예를 들면 Tkinter 3.웹프 4. 수치연산 5. 데베 피클 5. 데이터분석 
6. 사물인터넷 라즈베리파이->리눅스기반. 제어도구 

파이썬으로 할 수 없는 일:
1. 시스템과 밀접한 프밍. 속도가 느림... 2. 모바일앱

대화형인터프리터

def는 함수를 만들 때 사용하는 예약어

아이들 창: 셸 창과 에디터창 (에디터가 실행되는 창-뉴 파일 클릭한 후 뜨는 모달창)

주석은 한줄-#, 여러줄-"""
--------------------------------------------------------------------------------------------
<2장>
[2-1]
-기초 자료형
숫자형: 정수, 실수, 8진수, 16진수
4.24E10 = 4.24*10^10
0o177
0x8ff

연산자: 
**연산자: 3 ** 4 = 3^4 =81

사칙연산 다른점: 
7/4 = 1.75(그냥 결과값:실수)
7%4=3(나머지)
7//4=1 (몫:정수)

[2-2]
문자열(String): 쓰는법은 3가지. ' ', " ", """ """, ''' '''
문자열 만드는 방법이 다양한 이유는? 
1. 문자열안에 작은 따옴표가 있는 경우는 ex) "Eunyu's" 큰따옴표 사용
2. 문자열 안에 작은 따옴표 포함: ex) ' "python"is easy ' 작은 따옴표 사용
3. 백슬래쉬 이용 ex) " \"python\" is easy "

여러줄인 문자열을 변수에 대입하고 싶을 때:
1. \n(이스케이프 코드)
2. '''(""") - 이스케이프 코드를 쓰는 것보다 깔끔하다.
levi is cute
levi is great
'''(""")

이스케이프 코드:
\n, \t, \\(문자\를 그대로 표현), \', \", \r(현재커서를 가장 앞으로 이동)
\a(belling), \b(back sapce), \000(NULL)

문자열 연산하기: 
더해서 연결하기, 문자열곱하기

문자열 인덱싱: 가리킨다는 의미
a[번호]는 문자열 안의 특정한 값을 뽑아냄 -> 인덱싱
a[-1]은 문자열을 뒤에서부터 인덱싱. 즉 , 뒤에서 첫번째.
a[-0]이 아닌 이유는 -0과 0이 같음 

문자열 슬라이싱: 문자열에서 단순히 한 문자가 아니라 여러 문자를 뽑아내기
a[0:4] = 0에서 3까지의 문자를 뽑아냄 즉, [0<= a < 4] 이런 의미
a[0:], a[:17], a[:], a[19:-7]
ex) pithon을 python으로 바꾸기
>>> a='pithon'
>>> a[:1]
'p'
>>> a[2:]
'thon'
>>> a[:1]+'y'+a[2:]
'python'
>>>

문자열포매팅: 문자열안에 어떤 값을 삽입
1. 바로 대입: 
>>> "I eat %s apples" %"five"
'I eat five apples'
2. 변수 대입:
>>> "I eat %d apples" % number
'I eat 3 apples'
3. 두 개 이상의 값 넣기
"I eat %d apples. Today is %s." %(number,day)
'I eat 3 apples. Today is three.

문자열 포맷 코드: 모르는 것만- %o(8진수), %x-16진수, %%-%그자체
재밌는 %s: 자동으로 문자열로 바꿈
>>> "My levi %s" %12.24
'My levi 12.24'
>>> "My levi %s" %"Love"
'My levi Love'

포맷코드와 숫자 함께 사용하기:
1. 정렬과 공백(문자열길이는 10, 대입되는 값을 오른쪽으로 정렬, 나머지는 공백)
>>> "%10s" %"hi"
'        hi'
>>> "%-10sjain."%'hi'
'hi        jain.'
2. 소수점 표현하기
>>> "%0.4f"%3.423456433
'3.4235'
>>> '%10.4f'%3.4555432 (응용)
'    3.4555'

format함수를 이용한 포매팅
1. 숫자 바로 대입
>>> "I eat {0} apples.".format(3)
'I eat 3 apples.'
0이 3으로 바뀜
2. 문자열 바로 대입
>>> "I eat {0} apples.".format("five")
'I eat five apples.'
3. 등
>>> "I ate {0} apples. My name is {name}".format(10, name="levi")
'I ate 10 apples. My name is levi'
4. 정렬
>>> "{0:<10}".format("hi")
'hi        '
>>> "{0:>10}".format("hi")
'        hi'
>>> "{0:^10}".format("hi")
'    hi    '(가운데 :^)

공백채우기:
>>> "{0:=^10}".format("hi")
'====hi===='

>>> "{0:0.4f}".format(y)
'3.4547'
>>> "{0:10.4f}".format(y)
'    3.4547'

>>> "{{ and }}".format()
'{ and }'

f 문자열 포매팅
>>> name='levi'
>>> age=30
>>> f'나의 이름은 {name}, 나이는 {age}.'
'나의 이름은 levi, 나이는 30.'
>>> f'나는 내년이면 {age+1}살이다'
'나는 내년이면 31살이다'
d={'name':'levi', 'age':31}
>>> f'my name is {d["name"]}. my age is {d["age"]}.'
'my name is levi. my age is 31.' 

정렬
>>> f'{"hi":<10}'
'hi        '
>>> f'{"hi":>10}'
'        hi'
>>> f'{"hi":^10}'
'    hi    '
공백채우기
>>> f'{"hi":=^10}'
'====hi===='
>>> f'{"hi":!^10}'
'!!!!hi!!!!'
소수점
>>> y=3.455637336
>>> f'{y:0.4f}'
'3.4556'
>>> f'{y:10.4f}'
'    3.4556'
{end} 표현
>>> f'{{end}}'
'{end}'

문자열 관련 함수들:
-문자열 중 특정 알파벳의 개수
>>> a="hobby"
>>> a.count('b')
2
-위치 알려주기
>>> a="python is the best choice"
>>> a.find('b')
14
>>> a.find('k') -없는 문자는 -1
-1

-위치2: 문자열 중 문자가 처음 나온 위치
>>> a="Life is too short"
>>> a.index('t')
8
>>> a.index('k')
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: substring not found

-join
>>> ",".join('abcd')
'a,b,c,d'
>>> ",".join(['a','b','c','d'])
'a,b,c,d'

-upper & lower
>>> a="hi"
>>> a.upper()
'HI'
>>> a="HI"
>>> a.lower()
'hi'

-공백 지우기(왼, 오, 양옆)
>>> a=' hi '
>>> a.lstrip()
'hi '
>>> a.rstrip()
' hi'
>>> a.strip()
'hi'

-replace
>>> a="Life is too short"
>>> a.replace("Life", "your leg")
'your leg is too short'

-split
>>> a="Life is too short"
>>> a.split()
['Life', 'is', 'too', 'short'] <-list type

>>> b='a:b:c:d'
>>> b.split(':')
['a', 'b', 'c', 'd'] <-list type

[2-3] list type

a = [] =list() 비어있음 둘다 사용가능

-indexing
'2중 리스트에서 'a' 뽑아내기'
>>> a=[1,2,3,['a','b','c']]
>>> a[-1]
['a', 'b', 'c']
>>> a[-1][0]
'a'

'3중 리스트에서 'Life' 뽑아내기'
>>> a=[1,2,['a','b',['Life','is']]]
>>> a[-1][2][0]
'Life'

-slicing
'list vs string'
>>> a=[1,2,3,4,5]
>>> a[0:2]
[1, 2]
>>> a='12345'
>>> a[0:2]
'12'


>>> a=[1,2,3,4,5]
>>> b=a[:2]
>>> c=a[2:]
>>> b
[1, 2]
>>> c
[3, 4, 5]

'리스트가 중첩된 리스트에서 슬라이싱하기'
>>> a=[1,2,3,['a','b', 'c'],4,5]
>>> a[2:5]
[3, ['a', 'b', 'c'], 4]
>>> a[3][:2]
['a', 'b']
>>>

-calculation
>>> a=[1,2,3]
>>> b=[4,5,6]
>>> a+b
[1, 2, 3, 4, 5, 6] <-2개의 리스트를 한 개의 리스트로 합친다.

>>> a*3
[1, 2, 3, 1, 2, 3, 1, 2, 3]

>>> len(a) <-길이 구하기
3

**>>> a[2]+"hi"** 
->에러
->이유: 
TypeError: unsupported operand type(s) for +: 'int' and 'str'
->해결: 
a를 문자열로 만들면 가능
방법1.
>>> a=[1,2,3]
>>> str(a[2])+"hi"
'3hi'
방법2.
>>>a='123' 
>>> a[2]+"hi"
'3hi'


-modifying and deleting

>>> a=[1,2,3]
>>> a[2]=4
>>> a
[1, 2, 4]

del 객체
>>> a=[1,2,3,4,5]
>>> del a[2:]
>>> a
[1, 2]

-function related with LIST
(append, sort, reverse, insert, remove, pop, count, extend) 
>>> a=[1,2,3]
>>> a.append(4)
>>> a
[1, 2, 3, 4]
>>> a.append([5,6])
>>> a
[1, 2, 3, 4, [5, 6]] <-어떠한 자료형도 추가 가능

>>> a=[1,4,3,2]
>>> a.sort()
>>> a
[1, 2, 3, 4]
>>> a=['a','c','b']
>>> a.sort()
>>> a
['a', 'b', 'c']

>>> a=['a','c','b']
>>> a.reverse()
>>> a
['b', 'c', 'a']
>>> a.index('a')
2
>>> a=[1,2,3]
>>> a.index(0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: 0 is not in list 
<-리스트에 있는 값의 인덱스 위치를 알려주는 것. 
0은 a 리스트에 존재하지 않는 값

>>> a=[1,2,3]
>>> a.insert(0,4)
>>> a
[4, 1, 2, 3]
>>> a.insert(3,5)
>>> a
[4, 1, 2, 5, 3]

첫번째로 나오는 해당 값을 삭제 
>>> a=[1,2,3,1,2,3]
>>> a.remove(3)
>>> a
[1, 2, 1, 2, 3]

pop은 리스트의 맨 마지막 요소를 끄집어내고, 삭제한다.
>>> a=[1,2,3]
>>> a.pop()
3
>>> a
[1, 2]

a.pop(1)
이런식으로 1 인덱스의 값을 끄집어내고 삭제할 수도 있다.

1이 몇 개 나오는지 
>>> a=[1,2,3,1]
>>> a.count(1)
2

a.extends(b) == a+=b
>>> a=[1,2,3]
>>> a.extend([4,5])
>>> a
[1, 2, 3, 4, 5]
>>> b=[6,7]
>>> a.extend(b)
>>> a
[1, 2, 3, 4, 5, 6, 7]


[2-4] tuple type

list = [],  tuple=()
list can change an element, but tuple isn't.
list can modify and delete an element, but tuple can't.
t1 = (1, ) 요소가 1개라도 뒤에 콤마를 붙여야한다.

can't:
>>> t1=(1,2,'a','b')
>>> del t1[0]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object doesn't support item deletion

>>> t1[0]='c'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment

tuple 다루기!!:
'indexing'
>>> t1=(1,2,'a','b')
>>> t1[0]
1
>>> t1[3]
'b'

'slicing'
>>> t1[1:]
(2, 'a', 'b')

'calculation'
>>> t2 = (3,4)
>>> t1+t2
(1, 2, 'a', 'b', 3, 4)
>>> t2 = (3,4)
>>> t2*3
(3, 4, 3, 4, 3, 4)

'length'
>>> len(t1)
4


[2-5] dictionary type

대응 관계를 나타낼 수 있는 자료형. key : value
-> call this 배열(Associative array) or Hash
딕셔너리는 리스트나 튜플처럼 순차적으로 해당 요솟값을 구하지 않음.
key를 받으면, key가 있는 곳으로 가서 value를 얻는다.

-add elements
>>> a={1:'a'}
>>> a[2]='b'
>>> a
{1: 'a', 2: 'b'}
>>> a['name']='levi'
>>> a
{1: 'a', 2: 'b', 'name': 'levi'}
>>> a[3]=[1,2,3]
>>> a
{1: 'a', 2: 'b', 'name': 'levi', 3: [1, 2, 3]}

-delete an element
# del a[key]
>>> a
{1: 'a', 2: 'b', 'name': 'levi', 3: [1, 2, 3]}
>>> del a[1]
>>> a
{2: 'b', 'name': 'levi', 3: [1, 2, 3]}

- Why use dictionary type?
사람 이름과 특성을 한쌍으로 정리. -> 간편

-indexig and slicing --> key값 하나로
key를 사용하여 value를 얻는다.

>>> a={1:'a', 2:'b'}
>>> a[1]
'a'
>>> a[2]
'b'

>>> a={'a':1, 'b':2}
>>> a['a']
1
>>> a['b']
2

-주의사항:
1. key값이 중복되면 안된다. key는 고유한 값이기 때문.
>>> a={1:'a', 1:'b'}
>>> a
{1: 'b'}
2. key값은 list type이 될 수 없다.
>>> a={[1,2]:'hi'}
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: unhashable type: 'list'

-> 대신 tuple 값은 사용 가능하다.
>>> a={(1,2):'hi'}
>>> a
{(1, 2): 'hi'}

-Function related with Dictionary
# keys, values, items, clear, get, in

# keys()
>>> a={'name':'levi', 'birth':1225, 'height':160}
>>> a.keys()
dict_keys(['name', 'birth', 'height']) <-객체 그대로 반환(메모리 낭비x)
>>> list(a.keys())
['name', 'birth', 'height'] <-리스트 반환

# iterate(반복) 구문 사용 가능
>>> for k in a.keys():
...     print(k)
...
name
birth
height

#
>>> a.values()
dict_values(['levi', 1225, 160])

#
>>> a.items()
dict_items([('name', 'levi'), ('birth', 1225), ('height', 160)]) <-tuple type
>>> list(a.items())
[('name', 'levi'), ('birth', 1225), ('height', 160)]

#
>>> a.clear()
>>> a
{}

# a.get('name') == a['name']
>>> a={'name':'levi', 'birth':1225, 'height':160}
>>> a.get('name')
'levi'

다른점:
>>> print(a['nokey'])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
KeyError: 'nokey'

>>> print(a.get('nokey'))
None

# 딕셔너리 안에 찾으려는 key 값이 없을 경우
디폴트 값을 대신 가져오게 하고 싶을 때: get(x, '디폴트값')을 사용
>>> a.get('foo', 'bar')
'bar'
--> a 딕셔너리 안에는 foo에 해당하는 값이 없다. 그래서 디폴트값인 bar를 돌려준다.

# 해당 key가 딕셔너리 안에 있는 지 조사하기
>>> 'name' in a
True
>>> 'email' in a
False

[2-6] Set Type (집합 자료형)
set 키워드로 만듦. set 안에 [리스트 입력] or [문자열 입력]

특징: 1. 중복 허용 안함. 2.순서없음(unordered)
-> 인덱싱으로 값을 얻을 수 없음
유용: 교집합 합집합 차집합 구할 때

# 인덱싱을 하려면 리스트나 튜플로 변환 (리스트와 튜플은 순서가 있기 때문)
>>> s1 = set([1,2,3])
>>> s1
{1, 2, 3}
>>> s2 = set("hello")
>>> s2
{'o', 'l', 'h', 'e'}


>>> l1 = list(s1)
>>> l1
[1, 2, 3]
>>> t1 = tuple(s1)
>>> t1
(1, 2, 3)
>>> l1[0]
1
>>> t1[0]
1

# 교집합 차집합 합집합
** 교집합은 &, intersection()
>>> s1= set([1,2,3,4,5,6])
>>> s2=set([4,5,6,7,8,9])
>>> s1 & s2
{4, 5, 6}
>>> s1.intersection(s2)
{4, 5, 6}
>>> s2.intersection(s1)
{4, 5, 6}

**합집합은 |, union() 
중복된 값은 한 개씩만 포함한다.
>>> s1|s2
{1, 2, 3, 4, 5, 6, 7, 8, 9}
>>> s1.union(s2)
{1, 2, 3, 4, 5, 6, 7, 8, 9}
>>> s2.union(s1)
{1, 2, 3, 4, 5, 6, 7, 8, 9}


**차집합은 -, difference()
>>> s1
{1, 2, 3, 4, 5, 6}
>>> s2
{4, 5, 6, 7, 8, 9}

>>> s1-s2
{1, 2, 3}
>>> s2-s1
{8, 9, 7}

>>> s1.difference(s2)
{1, 2, 3}
>>> s2.difference(s1)
{8, 9, 7}

-집합 자료형 관련 함수들
** add, remove, update, 
#1개 값만 더하기-add
>>> s1 = set([1,2,3])
>>> s1.add(4)
>>> s1
{1, 2, 3, 4}
#여러 값 더하기-update
>>> s1 = set([1,2,3])
>>> s1.update([4,5,6])
>>> s1
{1, 2, 3, 4, 5, 6}
#제거 -remove
>>> s1 = set([1,2,3])
>>> s1.remove(2)
>>> s1
{1, 3}


[2-7] bool(불) 자료형

>>> a=True
>>> b=False
>>> type(a)
<class 'bool'>
>>> type(b)
<class 'bool'>

-자료형의 참과 거짓을 구분하는 기준
참:    "levi", [1,2,3], 1
거짓: "", (), {}, [], 0, None

-while문 이용

while 조건문:
	수행할 문장

>>> a=[1,2,3,4]
>>> while a:
...     print(a.pop())
...
4
3
2
1
>>> a
[]

리스트 안에 요소가 존재하는 한(a가 참인 동안) 계속 실행.
a가 빈리스트가 되면 false가 되고 반복문 종료.