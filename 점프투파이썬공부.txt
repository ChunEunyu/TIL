<1장>
인터프리터 언어 - 한 줄 씩 소스 코드를 해석해서 그때그때 결과를 확인

특징: 1.인간답고 직관적이다 
2. 뼈대는 파이썬으로 만들고, 빠른 실행이 필요한 부분은 C로 만들면 찰떡
3. 유지 보수와 공동작업이 쉬움
4. 괄호없이 줄을 잘 맞추어야하는 언어 
5. 개발속도가 빠르다

파이썬으로 할 수 있는 일: 
1. 시스템유틸리티 2.GUI 예를 들면 Tkinter 3.웹프 4. 수치연산 5. 데베 피클 5. 데이터분석 
6. 사물인터넷 라즈베리파이->리눅스기반. 제어도구 

파이썬으로 할 수 없는 일:
1. 시스템과 밀접한 프밍. 속도가 느림... 2. 모바일앱

대화형인터프리터

def는 함수를 만들 때 사용하는 예약어

아이들 창: 셸 창과 에디터창 (에디터가 실행되는 창-뉴 파일 클릭한 후 뜨는 모달창)

주석은 한줄-#, 여러줄-"""
--------------------------------------------------------------------------------------------
<2장>
-기초 자료형
숫자형: 정수, 실수, 8진수, 16진수
4.24E10 = 4.24*10^10
0o177
0x8ff

연산자: 
**연산자: 3 ** 4 = 3^4 =81

사칙연산 다른점: 
7/4 = 1.75(그냥 결과값:실수)
7%4=3(나머지)
7//4=1 (몫:정수)

문자열(String): 쓰는법은 3가지. ' ', " ", """ """, ''' '''
문자열 만드는 방법이 다양한 이유는? 
1. 문자열안에 작은 따옴표가 있는 경우는 ex) "Eunyu's" 큰따옴표 사용
2. 문자열 안에 작은 따옴표 포함: ex) ' "python"is easy ' 작은 따옴표 사용
3. 백슬래쉬 이용 ex) " \"python\" is easy "

여러줄인 문자열을 변수에 대입하고 싶을 때:
1. \n(이스케이프 코드)
2. '''(""") - 이스케이프 코드를 쓰는 것보다 깔끔하다.
levi is cute
levi is great
'''(""")

이스케이프 코드:
\n, \t, \\(문자\를 그대로 표현), \', \", \r(현재커서를 가장 앞으로 이동)
\a(belling), \b(back sapce), \000(NULL)

문자열 연산하기: 
더해서 연결하기, 문자열곱하기

문자열 인덱싱: 가리킨다는 의미
a[번호]는 문자열 안의 특정한 값을 뽑아냄 -> 인덱싱
a[-1]은 문자열을 뒤에서부터 인덱싱. 즉 , 뒤에서 첫번째.
a[-0]이 아닌 이유는 -0과 0이 같음 

문자열 슬라이싱: 문자열에서 단순히 한 문자가 아니라 여러 문자를 뽑아내기
a[0:4] = 0에서 3까지의 문자를 뽑아냄 즉, [0<= a < 4] 이런 의미
a[0:], a[:17], a[:], a[19:-7]
ex) pithon을 python으로 바꾸기
>>> a='pithon'
>>> a[:1]
'p'
>>> a[2:]
'thon'
>>> a[:1]+'y'+a[2:]
'python'
>>>

문자열포매팅: 문자열안에 어떤 값을 삽입
1. 바로 대입: 
>>> "I eat %s apples" %"five"
'I eat five apples'
2. 변수 대입:
>>> "I eat %d apples" % number
'I eat 3 apples'
3. 두 개 이상의 값 넣기
"I eat %d apples. Today is %s." %(number,day)
'I eat 3 apples. Today is three.

문자열 포맷 코드: 모르는 것만- %o(8진수), %x-16진수, %%-%그자체
재밌는 %s: 자동으로 문자열로 바꿈
>>> "My levi %s" %12.24
'My levi 12.24'
>>> "My levi %s" %"Love"
'My levi Love'

포맷코드와 숫자 함께 사용하기:
1. 정렬과 공백(문자열길이는 10, 대입되는 값을 오른쪽으로 정렬, 나머지는 공백)
>>> "%10s" %"hi"
'        hi'
>>> "%-10sjain."%'hi'
'hi        jain.'
2. 소수점 표현하기
>>> "%0.4f"%3.423456433
'3.4235'
>>> '%10.4f'%3.4555432 (응용)
'    3.4555'

format함수를 이용한 포매팅
1. 숫자 바로 대입
>>> "I eat {0} apples.".format(3)
'I eat 3 apples.'
0이 3으로 바뀜
2. 문자열 바로 대입
>>> "I eat {0} apples.".format("five")
'I eat five apples.'
3. 등
>>> "I ate {0} apples. My name is {name}".format(10, name="levi")
'I ate 10 apples. My name is levi'
4. 정렬
>>> "{0:<10}".format("hi")
'hi        '
>>> "{0:>10}".format("hi")
'        hi'
>>> "{0:^10}".format("hi")
'    hi    '(가운데 :^)

공백채우기:
>>> "{0:=^10}".format("hi")
'====hi===='

>>> "{0:0.4f}".format(y)
'3.4547'
>>> "{0:10.4f}".format(y)
'    3.4547'

>>> "{{ and }}".format()
'{ and }'

f 문자열 포매팅
>>> name='levi'
>>> age=30
>>> f'나의 이름은 {name}, 나이는 {age}.'
'나의 이름은 levi, 나이는 30.'
>>> f'나는 내년이면 {age+1}살이다'
'나는 내년이면 31살이다'
d={'name':'levi', 'age':31}
>>> f'my name is {d["name"]}. my age is {d["age"]}.'
'my name is levi. my age is 31.' 