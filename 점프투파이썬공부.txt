<1장>
인터프리터 언어 - 한 줄 씩 소스 코드를 해석해서 그때그때 결과를 확인

특징: 1.인간답고 직관적이다 
2. 뼈대는 파이썬으로 만들고, 빠른 실행이 필요한 부분은 C로 만들면 찰떡
3. 유지 보수와 공동작업이 쉬움
4. 괄호없이 줄을 잘 맞추어야하는 언어 
5. 개발속도가 빠르다

파이썬으로 할 수 있는 일: 
1. 시스템유틸리티 2.GUI 예를 들면 Tkinter 3.웹프 4. 수치연산 5. 데베 피클 5. 데이터분석 
6. 사물인터넷 라즈베리파이->리눅스기반. 제어도구 

파이썬으로 할 수 없는 일:
1. 시스템과 밀접한 프밍. 속도가 느림... 2. 모바일앱

대화형인터프리터

def는 함수를 만들 때 사용하는 예약어

아이들 창: 셸 창과 에디터창 (에디터가 실행되는 창-뉴 파일 클릭한 후 뜨는 모달창)

주석은 한줄-#, 여러줄-"""
--------------------------------------------------------------------------------------------
<2장>
-기초 자료형
숫자형: 정수, 실수, 8진수, 16진수
4.24E10 = 4.24*10^10
0o177
0x8ff

연산자: 
**연산자: 3 ** 4 = 3^4 =81

사칙연산 다른점: 
7/4 = 1.75(그냥 결과값:실수)
7%4=3(나머지)
7//4=1 (몫:정수)

문자열(String): 쓰는법은 3가지. ' ', " ", """ """, ''' '''
문자열 만드는 방법이 다양한 이유는? 
1. 문자열안에 작은 따옴표가 있는 경우는 ex) "Eunyu's" 큰따옴표 사용
2. 문자열 안에 작은 따옴표 포함: ex) ' "python"is easy ' 작은 따옴표 사용
3. 백슬래쉬 이용 ex) " \"python\" is easy "

여러줄인 문자열을 변수에 대입하고 싶을 때:
1. \n(이스케이프 코드)
2. '''(""") - 이스케이프 코드를 쓰는 것보다 깔끔하다.
levi is cute
levi is great
'''(""")

이스케이프 코드:
\n, \t, \\(문자\를 그대로 표현), \', \", \r(현재커서를 가장 앞으로 이동)
\a(belling), \b(back sapce), \000(NULL)

문자열 연산하기: 
더해서 연결하기, 문자열곱하기
