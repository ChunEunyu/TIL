점프투파이썬공부5장

[5-1] 클래스

-클래스는 왜 필요한가?

# 계산기가 두 대 필요한 프로그램: 각각의 계산기에 서로 다른 내용이 저장되어야함.
같은 내용의 함수와 전역변수가 여러 개 필요 -> 코드가 길어진다.

# 클래스를 사용하기
각각의 객체는 서로 독립적인 값을 유지한다.
계산기 대 수가 늘어나도 객체만 생성하면 됨. -> 간편해짐 


-클래스와 객체

클래스 - 똑같은 무엇인가를 계속해서 만들어낼 수 있는 틀.
객체 - 클래스로 만든 피조물. 하지만 객체마다 고유한 성격을 가진다. 독립적이다.

# ex 쿠키 클래스와 a, b 객체
>>> class Cookie:
...     pass
...
>>>a=Cookie()
>>> b=Cookie()

**객체와 인스턴스 차이
'a는 Cookie의 인스턴스' 'a는 객체'
인스턴스-클래스와 객체 사이의 관계를 나타낼 때
객체-독립된 a를 말할 때.



-사칙연산 클래스 만들기


1. 클래스 구조 만들기

# type 함수는 객체 타입을 출력한다.
>>> class Fourcal:
...     pass
...
>>> a=Fourcal()
>>> type(a)
<class '__main__.Fourcal'>


2. 객체에 숫자 지정할 수 있게 만들기

>>> class Fourcal:
...     def setdata(self, first, second):
...             self.first = first
...             self.second = second

클래스 안에 구현한 함수: 메서드
객체를 통해 클래스의 메서드 호출하기: a.setdata(3,4)
(self, first, second)에서 self의 의미: a객체 자신 

**또 다른 메서드 호출법
#클래스를 통해 메서드 호출
>>> a = FourCal()
>>> FourCal.setdata(a, 4, 2) # 반드시 a를 써야함.
# 일반적으로는 a.setdata(3,4)



# setdata() 수행문

self.first = 4
self.second = 2

a.first = 4 # a객체에 객체변수 first가 생성되고 값 4가 저장된다.
a.second = 2


-더하기 기능 만들기
>>> class Fourcal:
...     def setdata(self, first, second):
...             self.first = first
...             self.second = second
...     def add(self):
...             result = self.first+self.second
...             return result
...
>>> a=Fourcal()
>>> a.setdata(4,2)
>>> print(a.add())

#a.add() - > add메서드가 수행되면 self에는 자동으로 객체 a가 입력된다.


-생성자(Constructor)
# __init__

>>> class FourCal:
...     def __init__(self, first, second):
...             self.first = first
...             self.second = second
...     def setdata(self, first, second):
...             self.first = first
...             self.second = second
...     def add(self):
...             result = self.first+self.second
...             return result
...     def mul(self):
...             result = self.first-self.second
...             return result
...     def div(self):
...             result = self.first/self.second
...             return result
...
>>> a=FourCal(3,4) # 반드시 생성자의 형태로 매개변수를 설정해야한다.

>>> a.add()
7
>>> a.mul()
-1
>>> a.div()
0.75


-클래스의 상속
기존 클래스는 놔둔 채 새로운 클래스를 만들어 기능 확장.

어떤 클래스를 만들 때 다른 클래스의 기능을 물려받을 수 있게 만든다.
** class 클래스이름(상속받을 클래스이름) **

>>> class MoreFourCal(FourCal):
...     def pow(self):
...             result = self.first ** self.second #제곱 형태 
...             return result
...
>>> a = MoreFourCal(4,2)
>>> a.pow()
16

->> 기존 클래스에 기능을 추가하거나 변경할 때 사용.
기존 클래스가 수정이 허용되지 않을 떄 상속을 사용.



-메서드 오버라이딩
부모클래스에 있는 메서드를 동일한 이름으로 다시 만드는 것.
부모클래스의 메서드 대신 오버라이딩한 메서드가 호출된다.

# 0이 분모가 되면 에러가 나기 때문에.
>>> class safeFourCal(FourCal):
...     def div(self):
...             if self.second == 0:
...                     return 0
...             else:
...                     return self.first / self.second

>>> a = safeFourCal(4,0)
>>> a.div()
0



-클래스 변수
클래스변수는 값을 공유한다.
객체변수는 독립적으로 그 값을 유지.


>>> class Family:
...     lastname = "kim"
...
>>> print(Family.lastname) # 클래스이름.클래스변수 형태로 사용한다.
kim

>>> a = Family()
>>> b = Family()
>>> print(a.lastname)
kim
>>> print(b.lastname)
kim

#클래스 변수의 값을 바꾸었을 경우
>>> Family.lastname="Park"
>>> print(a.lastname)
Park
>>> print(b.lastname)
Park
# a. b 객체에 있는 클래스변수의 값이 모두 바뀐다.


[5-2] 모듈
모듈은 변수 또는 클래스를 모아놓은 파일. 
다른 사람이 미리 만들어놓은 파일을 사용하여 크로그래밍을 수월하게 할 수 있다.


-모듈 만들기
파이썬 확장자 .py로 만든 파이썬 파일은 모두 모듈
mod1.py를 저장했다.


-모듈 불러오기
** 1. import 모듈이름 **
** 2. 때로는 from 모듈이름 import 모듈함수 **
#cmd 이용


1.
C:\doit>python
Python 3.9.7 (tags/v3.9.7:1016ef3, Aug 30 2021, 20:19:38) [MSC v.1929 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
>>> import mod1
>>> print(mod1.add(3,4))
7
>>> print(mod1.sub(4,2))
2

2.
>>> from mod1 import *
>>> from mod1 import sub, add
>>> from mod1 import add



- if __name__ == "__main__": 의 의미

파이썬의 __name__ 변수.
직접 mod1.py 파일을 실행할 때: __name__ 변수에는 __main__이 저장됨.
파이썬 셸이나 다른 파이썬 모듈에서 mod1을 import 하면 
__name__ 변수에는 mod1이 저장됨.
>>> import mod1
>>> mod1.__name__
'mod1'


def add(a, b): 
    return a+b

def sub(a, b): 
    return a-b

if __name__ == "__main__": 
    print(add(1, 4))
    print(sub(4, 2))


-클래스나 변수 등을 포함한 모듈

#mod2.py
PI = 3.141592 #변수 포함 

class Math: #클래스 포함
    def solv(self, r):
        return PI * (r ** 2)

def add(a,b): #함수 포함
    return a+b

#cmd
>>> import mod2 
>>> print(mod2.PI) #모듈의 변수값을 사용
3.141592
>>> a = mod2.Math() #모듈의 클래스를 사용
>>> print(a.solv(2)) # 클래스 내 함수 사용
12.566368
>>> print(mod2.add(mod2.PI, 4.4)) #모듈의 함수를 이용.  
7.5415920000000005 # 모듈의 변수값과 실수를 더한다.


-다른 파일에서 모듈 불러오기

동일한 디렉터리에 있는 모듈을 불러와서 사용
# modest.py

import mod2
result = mod2.add(3,4)
print(result)




[5-3] 패키지

패키지는 파이썬 모듈을 계층적으로 관리할 수 있게 한다.
루트 디렉터리 아래에는 서브디렉터리가 있고,
.py가 확장자인 파일은 파이썬 모듈이다.


-패키지 만들기
#import 뒤에 적힌 경로를 모두 거친 후 함수에 도달할 수 있다.
#from을 적으면 from 뒤에 있는 경로는 생략 가능

1. echo 모듈을 import -> echo.py 파일
>>> import game.sound.echo
>>> game.sound.echo.echo_test()
echo

2. echo 모듈이 있는 디렉터리까지 import
>>> from game.sound import echo
>>> echo.echo_test()
echo

3. echo 모듈의 echo_test 함수를 직접 import
>>> from game.sound.echo import echo_test
>>> echo_test()
echo

**불가능

import game
이렇게 지정하면 game 디렉터리의 __init__.py에 정의한 것만 참조가능.

import game.sound.echo.echo_test
도트 연산자(.)를 사용할 때 가장 마지막 항목은 반드시 모듈 또는 패키지여야 한다.


-__init__.py의 용도
__init__.py 파일은 해당 디렉터리가 패키지의 일부임을 알려준다.
즉, 폴더 안에 이 파일이 있어야 패키지로 인식된다.

#이런 코드가 실행되려면 sound 폴더에 __init__.py 파일이 있어야함.
>>> from game.sound import * #from game.sound <- sound가 모듈이어야 함
>>> echo.echo_test()
echo


-relative 패키지

1. # render.py
from game.sound.echo import echo_test
def render_test():
    print("render")
    echo_test()

2.
# render.py
from ..sound.echo import echo_test #..은 부모 디렉터리를 의미

def render_test():
    print("render")
    echo_test()

#.은 현재 디렉터리를 의미

#cmd 실행
>>> from game.graphic.render import render_test
>>> render_test()
render
echo



[5-4] 예외처리

-오류는 어떤 때 발생하는 가?
1. FileNotFoundError 
2. ZeroDivisionError
3. IndexError

-오류 예외 처리 기법
except [발생 오류 [as 오류 메시지 변수]]:

1. try, except
try: 
   ...
except:
    ...

2.  except문에 미리 정해놓은 오류 이름과 일치할 때만 except 블록을 수행
try:
    4 / 0
except ZeroDivisionError as e:
    print(e)


-try .. finally
#finally문은 항상 수행

f = open('foo.txt', 'w')
try:
    # 무언가를 수행한다.
finally: #보통 사용한 리소스를 close할 때 사용
    f.close()


-여러 개의 오류 처리

>>> try:
...     a=[1,2]
...     print(a[3])
...     4/0
... except (ZeroDivisionError, IndexError) as e:
...     print(e)
...
list index out of range 

#먼저 생긴 오류를 출력하고 종료


**except문이 수행되지 않는 경우:
try -> else

>>> try:
...     age = int(input('나이를 입력하세요: '))
... except:
...     print("입력이 정확하지 않습니다.")
... else:
...     if age>=18:
...             print("환영합니다.")
...     else:
...             print("미성년자는 출입금지입니다.")
...
나이를 입력하세요: 20
환영합니다.


-오류 회피하기
try:
    f = open("나없는파일", 'r')
except FileNotFoundError:
    pass


-오류 일부러 발생시키기
**raise 명령어 사용**

# 반드시 fly함수를 구현해야 하는 경우

# fly함수를 구현하지 않으면 에러 발생
class Bird:
    def fly(self):
        raise NotImplementedError 

# Bird class를 상속받은 Eagle class.
class Eagle(Bird):
    def fly(self): #반드시 fly 함수가 오버라이딩되어야 에러가 안난다.
	print("very fast")

eagle = Eagle()
eagle.fly()
>>> very fast


-예외 만들기

1. Exception 클래스를 상속

class MyError(Exception):
    pass

def say_nick(nick):
    if nick == '바보':
	raise MyError()
    print(nick)

2. try, except
try: say_nick("천사")
     say_nick("바보")
except MyError:
    print("허용되지 않는 별명입니다.")

3. 오류 메시지 사용
# __str__ 메서드를 구현해야 except문에서 출력된다.

class MyError(Exception):
    def __str__(self): 
        return "허용되지 않는 별명입니다."

try: say_nick("천사")
     say_nick("바보")
except MyError as e:
    print(e)



[5-5] 내장함수

print. del, type 같은 것들..
내장함수는 외부 모듈과 달리 import가 필요하지 않다.

-abs,all,any,chr,dir,divmod, enumerate, eval

-filter

#positive.py

def positive(l):
    result=[]
    for i in l:
        if i>0:
            result.append(i)
    return result

print(positive([1,-3,2,0,-5,6]))

#filter1.py

def positive(x):
    return x>0

print(list(filter(positive, [1,-3,2,0,-5,6])))


# lambda 이용
>>> list(filter(lambda x: x>0, [1,2,-1,-3,2,0,-4]))
[1, 2, 2]

-hex, id, input, int, isinstance, len

-map

1. 일반적으로 출력하기
# two_times.py

def two_times(numberList):
    result=[]
    for number in numberList:
        result.append(number*2)
    return result

result = two_times([1,2,3,4])
print(result)

2. 입력받은 리스트요소에 따라 함수 실행 후 결괏값을 출력
>>> def two_times(x):
...     return x*2
...
>>> list(map(two_times, [1,2,3,4]))
[2, 4, 6, 8]

3. lambda 이용
>>> list(map(lambda x: x*2, [1,2,3,4]))
[2, 4, 6, 8]

-max,min,oct,open[b는 바이너리모드. rb, ra 이런식으로 조합해서 사용]

-ord,pow,range,round,sorted[sort는 정렬만할뿐 결과를 돌려주진 않지만, sorted]

-str, sum. tuple, type, zip



[5-6] 라이브러리 

-sys
변수와 함수를 직접 제어할 수 있다.


-pickle

dump함수 사용 -> 딕셔너리 객체인 data를 그대로 파일에 저장
>>> import pickle
>>> f=open("test.txt",'wb')
>>> data={1:'python', 2:'you need'}
>>> pickle.dump(data, f)
>>> f.close()

# 객체 상태 그대로 불러오기
>>> import pickle
>>> f=open("test.txt",'rb')
>>> data=pickle.load(f)
>>> print(data)
{1: 'python', 2: 'you need'}


-os
환경변수, 디렉터리, 파일 등 os자원을 제어할 수 있다.

>>> import os
>>> os.environ

>>> os.environ['PATH']
'C:\\ProgramData\\Oracle\\Java\\javapath;...생략...'

>>> os.chdir("c:\WINDOWS")

>>> os.getcwd()
'c:\\WINDOWS'

>>> os.system("dir")

>>> f = os.popen("dir")

>>> print(f.read())

**기타 유용한 os 관련 함수
os.mkdir(디렉터리)	디렉터리를 생성한다.
os.rmdir(디렉터리)	디렉터리를 삭제한다.단, 디렉터리가 비어있어야 삭제가 가능하다.
os.unlink(파일)	파일을 지운다.
os.rename(src, dst)	src라는 이름의 파일을 dst라는 이름으로 바꾼다.


-shutil
파일을 복사해 주는 파이썬 모듈

>>> import shutil
>>> shutil.copy("src.txt", "dst.txt") #src 파일을 dst로 복사


-glob
#디렉터리에 있는 파일을 리스트로 만들어 돌려준다.

>>> import glob
>>> glob.glob("c:\doit\mark*")
['c:\\doit\\marks1.py', 'c:\\doit\\marks2.py', 'c:\\doit\\marks3.py']


-tempfile
파일을 임시로 만들어서 사용할 때
중복되지 않는 임시 파일의 이름을 무작위로 만들어준다.

>>> import tempfile
>>> filename = tempfile.mkstemp()
>>> filename
(3, 'C:\\Users\\best\\AppData\\Local\\Temp\\tmps6z1pqpd')

# 임시 저장 공간으로 사용할 파일 객체를 돌려준다.
바이너리쓰기모드(wb)를 갖는다. 
>>> import tempfile
>>> f=tempfile.TemporaryFile()
>>> f.close() # 이 파일은 자동으로 사라진다.



-time
>>> import time
>>> time.time()
1641539676.670933

>>> time.localtime(time.time())
time.struct_time(tm_year=2022, tm_mon=1, tm_mday=7, tm_hour=16, tm_min=15, tm_sec=33, tm_wday=4, tm_yday=7, tm_isdst=0)

>>> time.asctime(time.localtime(time.time()))
'Fri Jan  7 16:16:39 2022'

>>> time.ctime() # 항상 현재 시간만 돌려준다.
'Fri Jan  7 16:17:12 2022'


# 시간과 관련된 여러가지 포맷 코드를 표현
>>> time.strftime('출력할 형식 포맷 코드', time.localtime(time.time()))
>>> time.strftime('%x', time.localtime(time.time()))
'01/07/22'
>>> time.strftime('%c', time.localtime(time.time()))
'Fri Jan  7 16:21:04 2022'


time.sleep
일정한 시간 간격을 두고 루프를 이용하여 출력
#sleep1.py
import time
for i in range(10):
    print(i)
    time.sleep(1) #1초 간격


-calendar

# 그 해 전체의 달력 보기
>>> import calendar
>>> print(calendar.calendar(2022))
>>> calendar.prcal(2022) #위와 같은 결과

# 년 해당 월
>>> calendar.prmonth(2022,1)

# 해당 월이 무슨 요일이었는지, 해당 월이 며칠까지 있는 지
>>> calendar.monthrange(2022,1)
(5, 31) # 튜플 형태로 출력


-random

# 0.0 ~ 1.0 사이의 실수 중 난수 값 돌려주기
>>> import random
>>> random.random()
0.7901697188336545

# 1~10 사이 정수
>>> random.randint(1,10)
9


# 재미있는 함수 만들기

1. pop 사용
# random_pop.py
import random
def random_pop(data):
    number = random.randint(0, len(data)-1)
    return data.pop(number)

if __name__ == "__main__":
    data = [1,2,3,4,5]
    while data:
        print(random_pop(data)) 
# 리스트의 요소 중 무작위로 하나를 선택하여 꺼내고 그 값을 돌려준다.
꺼낸 요소는 pop 메서드에 의해 사라진다.


2. random 모듈의 choice 함수 사용하기
>>> def random_pop(data):
...     number = random.choice(data)
...     data.remove(number)
...     return number
...
# 입력으로 받은 리스트에서 무작위로 하나를 선택하여 돌려준다.


# shuffle로 리스트 섞기
>>> import random
>>> data=[1,2,3,4,5]
>>> random.shuffle(data)
>>> data
[3, 5, 2, 4, 1]



-webbrowser
자신의 시스템에서 사용하는 기본 웹 브라우저를 자동으로 실행하는 모듈

>>> import webbrowser
>>> webbrowser.open("http://google.com")
# 새로운 창 실행 webbrowser.open_new("http://google.com")


**스레드를 다루는 threading 모듈
컴퓨터에서 동작하고 있는 프로그램: process
1개의 프로세스, 1개 이상의 스레드 존재.

예.
# thread_test.py

import time
import threading #스레드 모듈 

def long_task():
    for i in range(5):
        time.sleep(1)
        print("working:%s\n" %i) # 0,1,2,3,4 출력

print("start")

threads=[] # 리스트
for i in range(5):
    t = threading.Thread(target=long_task) # 스레드를 생성
    threads.append(t) # 결과값을 threads 리스트에 저장한다.


for t in threads: # 스레드를 실행
    t.start()

for t in threads: #스레드가 끝날 때까지 기다린다.
    t.join()
    
print("end")


**라이브러리에 대한 공부가 더 필요하면: https://wikidocs.net/book/5445