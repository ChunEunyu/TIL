<3장 if, while, for 제어문>
 
[3-1] if문

*들여쓰기(indentation)
공백 vs 탭
-->요즘 파이썬 커뮤니티에서는 공백 4개 사용하는 걸 권장

*조건문: 참과 거짓을 판단하는 문장
if money:

-비교연산자
(<, >, ==, !=, >=, <=)

-and, or, not
"돈이 3000원 이상 있거나 카드가 있다면 택시를 타고 그렇지 않으면 걸어 가라."
>>> money=2000
>>> card=True
>>> if money>=3000 or card:
...     print("taxi")
... else:
...     print("on foot")
...
taxi

-x in s, x not in s
s = 리스트, 튜플, 문자열

>>> 1 in [1,2,3]
True
>>> 1 not in [1,2,3]
False
>>> 'a' in ('a','b','c')
True
>>> 'j' not in 'python'
True

"만약 주머니에 돈이 있으면 택시를 타고, 없으면 걸어 가라."
>>> pocket = ['paper','cellphone','money']
>>> if 'money' in pocket:
...     print("taxi")
... else:
...     print("on foot")
...
taxi

**조건문에서 아무 일도 일어나지 않게 설정하고 싶다면: pass
>>> if 'money' in pocket:
...     pass
... else:
...     print("show yout card")
...
>>>

-elif
"주머니에 돈이 있으면 택시를 타고, 주머니에 돈은 없지만 카드가 있으면 택시를 타고, 
돈도 없고 카드도 없으면 걸어 가라."
>>> pocket=['paper','cellphone']
>>> card=True
>>> if 'money' in pocket:
...     print("taxi")
... elif card:
...     print("taxi")
... else:
...     print("on foot")
...
taxi

**간략한 코드 만들기
>>> if 'money' in pocket: pass
... else: print("show your card")

-조건부 표현식
조건문이 참인 경우 if 조건문 else 조건문이 거짓인 경우
>>> message="success" if score>=60 else "fail"
메세지는 "성공"이 된다. 만약 점수가 60점이 넘으면.
아니면 메세지는 "실패"다.

******card=True 카드가 있다로 해석******


[3-2] while문

"열 번 찍어 안 넘어가는 나무 없다" 프로그램
>>> while treeHit<10:
...     treeHit = treeHit +1
...     print("나무를 %d번 찍었습니다."%treeHit)
...     if treeHit ==10:
...             print("나무 넘어갑니다.")
...
나무를 1번 찍었습니다.
나무를 2번 찍었습니다.
나무를 3번 찍었습니다.
나무를 4번 찍었습니다.
나무를 5번 찍었습니다.
나무를 6번 찍었습니다.
나무를 7번 찍었습니다.
나무를 8번 찍었습니다.
나무를 9번 찍었습니다.
나무를 10번 찍었습니다.
나무 넘어갑니다.

# 10번이 되고 반복문을 실행하려고 할 때.. 
treeHit<10이기 때문에 거짓이 된다.
프로그램 종료됨. 


while문 Ex:
>>> prompt ="""
... 1. Add
... 2.Del
... 3.List
... 4.Quit
...
... Enter number: """
>>> number=0
>>> while number!=4:
...     print(prompt)
...     number = int(input())

-->메뉴가 출력되고, 사용자에게 번호를 입력받는다.
1~3이 입력되면 참이 되어 계속 반복, 
4가 입력되면 거짓이 되어 반복루프를 빠져나간다.


-while문 강제로 빠져나가기: break

-while문의 맨 처음으로 돌아가기: continue
**홀수만 출력하기**
>>> a=0
>>> while a<10:
...     a = a+1
...     if a%2 ==0: continue
...     print(a)
...
1
3
5
7
9

-무한루프
>>> while True:
...     print("Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.")
...
Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.
Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.
Ctrl+C를 눌러야 while문을 빠져나갈 수 있습니다.
....


[3-3] for문
-for 변수 in 리스트(튜플 또는 문자열)

**기본적인 for문**
>>> tlist=['one','two','three']
>>> for i in tlist:
...     print(i)
...
one
two
three

# 리스트가 차례로 i에 대입되며 출력한다.

-다양한 for문의 사용

#1 리스트의 요솟값이 튜플이기 때문에
변수에 자동으로 튜플이 대입된다.
>>> a=[(1,2),(3,4),(5,6)]
>>> for (first, last) in a:
...     print(first+last)
...
3
7
11

-응용
marks=[90,25,67,45,80]
number=0
for mark in marks:
    number = number+1
    if mark>=60:
        print("%d번 학생은 합격입니다."%number)
    else:
        print("%d번 학생은 불합격입니다."%number)

# mark는 리스트에 있는 요소를 대입하기 위한 변수,
number은 각 학생의 번호를 알고 출력하기위한 변수.


-for & continue
# 60점 이상인 1,3,5번 학생은 축하메시지가 출력되고,
나머지 학생들은 그냥 넘어간다.

marks = [90,25,67,45,80]
number=0

for mark in marks:
    number = number + 1
    if mark >= 60:
        print("%d번 학생! omedetou"%number)
    else:
        continue

# continue를 pass로 바꿔도 똑같이 출력됨.


-for문과 함께 자주 사용하는 range 함수

**range 함수
# 0부터 10미만의 숫자를 포함하는 range객체를 만들어준다.
>>> a=range(10)
>>> a
range(0, 10)


# 1부터 10까지의 합을 출력한다.
>>> add=0
>>> for i in range(1,11):
...     add = add + i
...
>>> print(add)
55

# 60점 이상이면 합격
marks=[90,25,67,45,80]
for number in range(len(marks)):
    if marks[number] <60:
        continue
    else:
        print("%d번 학생 축하합니다. 합격입니다."%(number+1))

# 구구단
end 매개변수를 통해 해당 결과값을 바로 출력
print(' ')를 통해 한 단이 끝나면 다음줄로 넘어가서 출력하도록 함

>>> for i in range(2,10):
...     for j in range(1,10):
...             print(i*j, end=" ")
...     print(' ')
...
2 4 6 8 10 12 14 16 18
3 6 9 12 15 18 21 24 27
4 8 12 16 20 24 28 32 36
5 10 15 20 25 30 35 40 45
6 12 18 24 30 36 42 48 54
7 14 21 28 35 42 49 56 63
8 16 24 32 40 48 56 64 72
9 18 27 36 45 54 63 72 81


# 리스트를 포함한 for 문

** 반복문을 통해 빈 리스트에 값을 추가. 
>>> a=[1,2,3,4]
>>> result=[]
>>> for num in a:
...     result.append(num*3)
...
>>> print(result)
[3, 6, 9, 12]

**간단한 방법
>>> a=[1,2,3,4]
>>> result= [num *3 for num in a]
>>> print(result)
[3, 6, 9, 12]

** 리스트 안에 for 반복문과 if문 사용
[표현식 for 항목 in 반복가능객체 if 조건문]

>>> a=[1,2,3,4]
>>> result=[]
>>> result=[num *3 for num in a if num % 2 ==0]
>>> print(result)
[6, 12]

**복잡하지만 for문을 두 개 이상 사용하기
>>> result=[x*y for x in range(2, 10)
...                     for y in range(1, 10)]
>>> print(result)



<4장>

[4-1] 함수

-파이썬 함수의 구조
def: 예약어, return: 함수의 결과값을 돌려주는 명령어

>>> def add(a,b):
...     return a+b
...
>>> a=3
>>> b=4
>>> c=add(a,b)
>>> print(c)
7

-매개변수와 인수
**매개변수(parameter)는 함수에 입력으로 전달된 값을 받는 변수
**인수(arguments)는 함수를 호출할 때 전달하는 입력값
>>> def add(a,b): #a,b는 매개변수
...     return a+b

>>> print(add(4,5)) #4,5는 인수
9


-입력값과 결괏값에 따른 함수에 형태

1. 일반적인 함수: 입력값과 결괏값이 있는 함수
>>> def add(a,b):
...     result=a+b
...     return result
...
>>> a=add(3,4)
>>> print(a)
7

2. 입력값이 없는 함수
>>> def say():
...     return 'hi'
...
>>> a=say() #괄호 안에 아무 것도 없어야 함.
>>> print(a)
hi

3. 결괏값이 없는 함수-결괏값은 오로지 return으로만 돌려받을 수 있음.
>>> def add(a,b):
...     print("%d, %d의 합은 %d입니다." %(a, b, a+b))
...
>>> add(3,4)
3, 4의 합은 7입니다.

**return 값이 없기 때문에 a를 출력해도 None
>>> a=add(3,4)
3, 4의 합은 7입니다.
>>> print(a)
None

4. 입력값도 결괏값도 없는 함수
**사용법: 함수이름()

>>> def say():
...     print('hi')
...
>>> say()
hi


-매개변수 지정하여 호출하기
>>> def add(a,b):
...     return a+b
...
>>> result = add(a=3, b=7)
>>> print(result)
10
>>> result=add(b=5, a=9) #순서 상관 없음
>>> print(result)
14

-입력값이 몇 개가 될 지 모를 때

>>> def add_many(*args):
...     result = 0
...     for i in args:
...             result+=i
...     return result
...
>>> result=add_many(1,2,3)
>>> print(result)
6
>>> result=add_many(1,2,3,4,5,6,6,77,8)
>>> print(result)
112

**키워드 파리미터 - 딕셔너리 형태로 출력된다.
>>> def print_kwargs(**kwargs):
...     print(kwargs)
...
>>> print_kwargs(a=1)
{'a': 1}
>>> print_kwargs(name='foo',age=3)
{'name': 'foo', 'age': 3}



-함수의 결괏값은 언제나 하나
**함수는 return 문을 만나는 순간 결괏값을 돌려준 후 함수를 빠져나간다.

# return에 두 개의 결괏값을 두면, 튜플 형태로 반환된다.
>>> def add_and_mul(a,b):
...     return a+b, a*b
...
>>> result=add_and_mul(3,4)
>>> result
(7, 12)

# 두 개의 변수에 각 각의 결괏값을 대입하려면. 
-->r1, r2 = (7, 12) 이 된다.

>>> r1, r2 =add_and_mul(3,4)
>>> r1
7
>>> r2
12

-return의 다른 쓰임새: 특별한 상황일 때 함수를 빠져나간다.
#''바보"라고 입력되면 함수를 종료시킨다.
#return으로 함수를 빠져나가기!!

>>> def say_nick(nick):
...     if nick == '바보':
...             return
...     print("나의 별명은 %s입니다."%nick)
...
>>> say_nick('야호')
나의 별명은 야호입니다.
>>> say_nick('바보')
>>>


-매개변수에 초깃값 미리 설정하기

def say_myself(name, old, man=True): 
    print("나의 이름은 %s 입니다." % name) 
    print("나이는 %d살입니다." % old) 
    if man: 
        print("남자입니다.")
    else: 
        print("여자입니다.")

say_myself("Levi", 31, True)와 say_myself("Levi", 31)의 결괏값이 같음


**주의 : 초기화시키고 싶은 변수는 항상 맨 뒤에 놓자
ex) (name, old, man=True)는 되지만, (name, man=True, old)는 안됨.
(name, man=True, old)를 매개변수로 둔 후
say_myself("Levi", 31)라고 입력했을 경우, 에러가 난다.
인터프리터는 31을 man에 넣어야할지, old에 넣어야할지 모르기 때문.


-함수 안에서 선언한 변수의 효력 범위
# 함수 안에서 선언한 매개변수는 함수 안에서만 사용된다.
함수 밖에서는 사용되지 않는다.

a=1
def vartest(a):
    a = a+1

vartest(3)
print(a)
-->a는 1이 출력됨.


-함수 안에서 함수 밖의 변수를 변경하는 방법

1. return 사용. 

a=1
def vartest(a):
    a=a+1
    return a

a=vartest(a)
print(a)

--> a=vartest(a) 
a가 vartest의 결괏값으로 바뀐다.


2. global 명령어 사용하기. 
# 함수 안에서 함수 밖의 변수 a를 쓰겠다는 의미.
하지만 쓰지 않는 것을 권장.
a=1
def vartest():
    global a
    a=a+1

vartest()
print(a)


-lambda
lambda는 def와 같은 함수 생성을 위한 예약어.
복잡하지 않은 함수로 사용.

#람다 버전
>>> add = lambda a, b: a+b
>>> result = add(3,4)
>>> print(result)
7

#def 버전
>>> def add(a,b):
...     return a+b
...
>>> result = add(3,4)
>>> print(result)
7


[4-2] 사용자 입출력

-입력

**input-기본
>>> a=input()
Life is too short, you need python
>>> a
'Life is too short, you need python'

**안내 문구 출력 후 입력 받기
>>> number=input("숫자를 입력하세요: ")
숫자를 입력하세요: 3
>>> print(number)
3
>>> type(number)
<class 'str'>
# input에 입력되는 모든 것은 문자열 형태!!


-print 
우리가 입력한 자료형을 출력한다.

>>> a=123
>>> print(a)
123
>>> a='python'
>>> print(a)
python
>>> a=[1,2,3]
>>> print(a)
[1, 2, 3]

# 큰따옴표로 둘러싸인 문자열과 +연산은 동일한 결과를 출력
>>> print("life" "is" "too short")
lifeistoo short
>>> print("life"+"is"+"too short")
lifeistoo short

# 문자열 띄어쓰기는 콤마로
>>> print("life","is","too short")
life is too short

# 한 줄에 결괏값 출력하기
매개변수 end 사용해서 끝 문자를 지정.

>>> for i in range(10):
...     print(i, end=" ")
...
0 1 2 3 4 5 6 7 8 9 >>>


[4-3] 파일 읽고 쓰기

-파일 생성하기
open(파일이름, 파일열기모드)

f = open("새 파일.txt", 'w') #f = open("c:/doit/새 파일.txt", 'w') 
f.close()

**파일 열기 모드
r - 파일 읽기 모드
w - 파일 쓰기 모드 -> 해당 파일이 존재하지 않으면 새로운 파일이 생성됨
a - 파일의 마지막에 새로운 내용을 추가시킨다.

**파일 경로 쓰기
1. "c:/doit/새 파일.txt"
2. "c:\\doit\\새 파일.txt"
3. r"c:\doit\새 파일.txt"


-파일을 쓰기 모드로 열어 출력값 적기

f = open("c:/doit/새 파일.txt", 'w')
for i in range(1,11):
    data = "%d번째 줄입니다.\n" %i
    f.write(data)
f.close()

-----
모니터 화면에 출력하는 프로그램
f = open("c:/doit/새 파일.txt", 'w')
for i in range(1,11):
    data = "%d번째 줄입니다.\n" %i
    print(data)
f.close()


-프로그램의 외부에 저장된 파일을 읽는 여러가지 방법

1.readline()

f=open("c:/doit/새 파일.txt", 'r')
while True :
    line = f.readline()
    if not line: break
    print(line)
f.close()

-------
일반적인 프로그램

while True:
    data = input()
    if not data: break
    print(data)


-readlines()
# 파일의 모든 줄을 읽어서 각각의 줄을 요소로 갖는 리스트로 돌려준다.
ex) ["1 번째 줄입니다.\n", "2 번째 줄입니다.\n", ..., "10 번째 줄입니다.\n"]

f = open("c:/doit/새파일.txt", 'r')
lines = f.readlines
for line in lines:
  #line = line.strip() # 줄바꿈(\n)문자 제거
    print(line)
f.close()


-read()
# 파일의 내용 전체를 문자열로 돌려준다.
f = open("C:/doit/새파일.txt", 'r')
data = f.read()
print(data)
f.close()

-파일에 새로운 내용 추가하기

f = open("c:/doit/새 파일.txt", 'a')
for i in range(11,20):
    data = "%d번째 줄입니다.\n" % i
    f.write(data)
f.close()


-with문과 함께 사용하기

with open("c:/doit/foo.txt", 'w') as f:
    f.write("Life is too short, you need python")
# close 함수를 사용하지 않아도 됨


-sys 모듈로 매개변수 추가

응용1.
# sys1.py == argv[0]
aaa == argv[1]
bbb == argv[2]
ccc == argv[3]

# sys1.py
import sys

args = sys.argv[1:] 
for i in args:
    print(i)

C:\doit>python sys1.py aaa bbb ccc
aaa
bbb
ccc

응용2.

# sys2.py
import sys

args = sys.argv[1:]
for i in args:
    print(i.upper(), end=" ")

C:\doit>python sys2.py life is too short, you need python
LIFE IS TOO SHORT, YOU NEED PYTHON

