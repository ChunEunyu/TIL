# 점프투파이썬공부7장
<7장> 정규표현식

[7-1] 정규표현식 살펴보기
복잡한 문자열을 처리하는 기법

-정규 표현식은 왜 필요한가? 주민등록번호를 암호화하는 경우 예시


# 정규 표현식을 사용하지 않을 때
data = """
park 800905-1049118
kim  700905-1059119
"""

result = []
for line in data.split("\n"):
    word_result = []
    for word in line.split(" "):
        if len(word) == 14 and word[:6].isdigit() and word[7:].isdigit():
            word = word[:6] + "-" + "*******"
        word_result.append(word)
    result.append(" ".join(word_result))
print("\n".join(result))

결과값:
park 800905-*******
kim  700905-*******


# 정규식 사용
import re 

data = """
park 800905-1049118
kim  700905-1059119
"""

pat = re.compile("(\d{6})[-]\d{7}")
print(pat.sub("\g<1>-*******", data))

결과값:
park 800905-*******
kim  700905-*******



[7-2] 정규 표현식 시작하기

-메타문자
. ^ $ * + ? { } [ ] \ | ( )

# 문자클래스 [ ]: [ ] 사이의 문자들과 매치

## [abc] 정규식
"a"는 정규식과 일치하는 문자인 "a"가 있으므로 매치
"before"는 정규식과 일치하는 문자인 "b"가 있으므로 매치
"dude"는 정규식과 일치하는 문자인 a, b, c 중 어느 하나도 포함하고 있지 않으므로 매치되지 않음

## [From - To]
[a-c]는 [abc], [0-5]는 [012345]
ex) 
[a-zA-Z] : 알파벳 모두
[0-9] : 숫자

!주의! ^는 (not)의 의미. [^0-9]는 숫자가 아닌 문자만 매치된다.

## 문자클래스
\d - 숫자와 매치, [0-9]와 동일한 표현식이다.
\D - 숫자가 아닌 것과 매치, [^0-9]와 동일한 표현식이다.
\s - whitespace 문자와 매치, [ \t\n\r\f\v]와 동일한 표현식이다. 맨 앞의 빈 칸은 공백문자(space)를 의미한다.
\S - whitespace 문자가 아닌 것과 매치, [^ \t\n\r\f\v]와 동일한 표현식이다.
\w - 문자+숫자(alphanumeric)와 매치, [a-zA-Z0-9_]와 동일한 표현식이다.
\W - 문자+숫자(alphanumeric)가 아닌 문자와 매치, [^a-zA-Z0-9_]와 동일한 표현식이다.



# Dot(.) 
줄바꿈(\n)문자를 제외한 모든 문자와 매치된다.

## a.b는 a+모든 문자+b라는 의미.
"aab"는 가운데 문자 "a"가 모든 문자를 의미하는 .과 일치하므로 정규식과 매치된다.
"a0b"는 가운데 문자 "0"가 모든 문자를 의미하는 .과 일치하므로 정규식과 매치된다.
"abc"는 "a"문자와 "b"문자 사이에 어떤 문자라도 하나는있어야 하는 이 정규식과 일치하지 않으므로 매치되지 않는다. 

## a[.]b는 a.b와 매치된다. a0b와는 x.
문자클래스내 점은 "모든문자"가 아닌 "점" 그 자체


# 반복(*)
ca*t : a*가 무한반복 가능하다는 의미
0~무한

정규식	문자열	Match 여부	설명
ca*t	ct	Yes	"a"가 0번 반복되어 매치
ca*t	cat	Yes	"a"가 0번 이상 반복되어 매치 (1번 반복)
ca*t	caaat	Yes	"a"가 0번 이상 반복되어 매치 (3번 반복)


# 반복(+)
1~무한반복
정규식	문자열	Match 여부	설명
ca+t	ct	No	"a"가 0번 반복되어 매치되지 않음
ca+t	cat	Yes	"a"가 1번 이상 반복되어 매치 (1번 반복)
ca+t	caaat	Yes	"a"가 1번 이상 반복되어 매치 (3번 반복)

# 반복 ({m,n}, ?)
반복 범위 지정.

** {1,}은 +와 동일하고, {0,}은 *와 동일
** ca{2}t : 반드시 2번 반복 -> caat여야 매치
** ca{2,5}t : 2~5회 반복 -> caat~caaaaat여야 매치

##비슷한 개념 ab?c: "a + b(있어도 되고 없어도 된다) + c"
정규식	문자열	Match 여부	설명
ab?c	abc	Yes	"b"가 1번 사용되어 매치
ab?c	ac	Yes	"b"가 0번 사용되어 매치
 


-파이썬에서 정규 표현식을 지원하는 re 모듈

>>> import re # 모듈
>>> p = re.compile('ab*') #정규표현식 컴파일 # 패턴은 정규표현식을 컴파일한 결과


-정규식을 이용한 문자열 검색

# 메서드
match()	문자열의 처음부터 정규식과 매치되는지 조사한다.
search()	문자열 전체를 검색하여 정규식과 매치되는지 조사한다.
findall()	정규식과 매치되는 모든 문자열(substring)을 리스트로 돌려준다.
finditer()	정규식과 매치되는 모든 문자열(substring)을 반복 가능한 객체로 돌려준다.

# match() : 처음 매칭 검색
>>> import re
>>> p = re.compile('[a-z]+')
>>> m = p.match("python")
>>> print(m)
<re.Match object; span=(0, 6), match='python'> #모두 알파벳 문자이므로, match
>>> m = p.match("3 python") # 3은 알파벳문자가 아님
>>> print(m)
None # 매치되지 않음

# search() : 전체 문자열 검색, 매칭
>>> import re
>>> p = re.compile('[a-z]+')
>>> m = p.search("python")
>>> print(m)
<re.Match object; span=(0, 6), match='python'>
>>> m = p.search("3 python")
>>> print(m)
<re.Match object; span=(2, 8), match='python'> 
  # 문자열 전체를 검색하기 때문에 3 이후 python과 매치된다.

# findall()
>>> result = p.findall("life is too short")
>>> print(result)
['life', 'is', 'too', 'short']
  # 각각의 단어를 정규식과 매치해서 리스트로 돌려줌

# finditer()
>>> result = p.finditer("life is too short")
>>> print(result)
<callable_iterator object at 0x000002671E2A1FC0>
>>> for r in result: print(r)
...
<re.Match object; span=(0, 4), match='life'>
<re.Match object; span=(5, 7), match='is'>
<re.Match object; span=(8, 11), match='too'>
<re.Match object; span=(12, 17), match='short'>
  # 결과로 반복가능한 객체를 돌려준다. 각각의 요소는 match 객체다.


-match 객체의 메서드

method	목적
group()	매치된 문자열을 돌려준다.
start()	매치된 문자열의 시작 위치를 돌려준다.
end()	매치된 문자열의 끝 위치를 돌려준다.
span()	매치된 문자열의 (시작, 끝)에 해당하는 튜플을 돌려준다. 

# cmd - match는 항상 문자열의 시작부터 조사
>>> m = p.match("python")
>>> m.group()
'python'
>>> m.start()
0 #항상 0이다.
>>> m.end()
6
>>> m.span()
(0, 6)

# cmd  - search()로 메서드 실행해보기
>>> m = p.search("3 python")
>>> m.start()
2 
>>> m.end()
8
>>> m.span()
(2, 8)

** 코드 축약
>>> m = re.match('[a-z]+', "python")
하지만 한 번 만든 객체를 여러번 사용하는 경우는 re.compile 사용이 편하다.



-컴파일 옵션

DOTALL(S) - . 이 줄바꿈 문자를 포함하여 모든 문자와 매치할 수 있도록 한다.
IGNORECASE(I) - 대소문자에 관계없이 매치할 수 있도록 한다.
MULTILINE(M) - 여러줄과 매치할 수 있도록 한다. (^, $ 메타문자의 사용과 관계가 있는 옵션이다)
VERBOSE(X) - verbose 모드를 사용할 수 있도록 한다. (정규식을 보기 편하게 만들수 있고 주석등을 사용할 수 있게된다.)

 # 옵션을 사용할 때는 re.DOTALL처럼 전체 옵션 이름을 써도 되고 re.S처럼 약어를 써도 된다.


# DOTALL, S

**일반
>>> import re
>>> p = re.compile('a.b')
>>> m = p.match('a\n') #\n은 .과 매치안됨
>>> print(m)
None

**수정 - re.DOTALL은 \n에 상관없이 검색할 때 사용
>>> p = re.compile('a.b', re.DOTALL)
>>> m = p.match('a\nb')
>>> print(m)
<re.Match object; span=(0, 3), match='a\nb'>

# IGNORECASE, I
대소문자 구분x

# MULTILINE, M

^는 문자열의 처음, $는 문자열의 마지막.
^python인 경우 문자열의 처음은 항상 python으로 시작해야 매치되고, 
만약 정규식이 python$이라면 문자열의 마지막은 항상 python으로 끝나야 매치된다.

^python\s\w+은 python이라는 문자열로 시작하고 그 뒤에 whitespace, 그 뒤에 단어가 와야 한다는 의미

# interprter
>>> import re
>>> p = re.compile("^python\s\w+", re.MULTILINE)
>>> data = """python one
... life is too short
... python two
... you need python
... python three"""
>>> print(p.findall(data))
['python one', 'python two', 'python three']
# re.M을 사용하면 ^는 각 라인의 처음으로 인식된다.
즉 re.MULTILINE 옵션은 ^, $ 메타 문자를 문자열의 각 줄마다 적용해 주는 것이다.


# VERBOSE, X
re.VERBOSE 옵션을 사용하면 문자열에 사용된 whitespace는 컴파일할 때 제거된다(단 [ ] 안에 사용한 whitespace는 제외).

charref = re.compile(r'&[#](0[0-7]+|[0-9]+|x[0-9a-fA-F]+);')
# 주석 사용
charref = re.compile(r"""
 &[#]                # Start of a numeric entity reference
 (
     0[0-7]+         # Octal form
   | [0-9]+          # Decimal form
   | x[0-9a-fA-F]+   # Hexadecimal form
 )
 ;                   # Trailing semicolon
""", re.VERBOSE)


-백슬래쉬 문제
>>> p = re.compile(r'\\section')
r문자를 삽입하면 이 정규식은 Raw String 규칙에 의해 백슬래시 2개 대신 1개만 써도 됨




[7-3] 강력한 정규 표현식의 세계로

-메타문자
소비없는 메타문자

# | 메타 문자는 or과 동일한 의미
# ^ 메타 문자는 문자열의 맨 처음과 일치함
# $ 메타 문자는 문자열의 끝과 매치함을 의미
^ 또는 $ 문자를 문자 그 자체로 매치하고 싶으면, \^, \$ 로 사용

# \A는 문자열의 처음과 매치됨
re.MULTILINE 옵션을 사용할 경우 ^은 각 줄의 문자열의 처음과 매치되지만,
 \A는 줄과 상관없이 전체 문자열의 처음하고만 매치된다.
# \Z는 문자열의 끝과 매치됨
re.MULTILINE 옵션을 사용할 경우 $ 메타 문자와는 달리 전체 문자열의 끝과 매치된다.

# \b는 단어 구분자(Word boundary)
보통 단어는 whitespace에 의해 구분.
r'\bclass\b'처럼 Raw string임을 알려주는 기호 r을 반드시 붙여 주어야 한다.
(\b는 파이썬 리터럴 규칙에 의하면 백스페이스(BackSpace)를 의미)

# \B 메타 문자는 whitespace로 구분된 단어가 아닌 경우에만 매치된다.



-그루핑(grouping) : ABC 문자열이 계속해서 반복되는지 조사하는 정규식
 재참조그루핑도 가능


-전방탐색

# 긍정형 전방 탐색((?=...)) - ... 에 해당되는 정규식과 매치되어야 하며 조건이 통과되어도 문자열이 소비되지 않는다.

# 부정형 전방 탐색((?!...)) - ...에 해당되는 정규식과 매치되지 않아야 하며 조건이 통과되어도 문자열이 소비되지 않는다.


-문자열 바꾸기
sub, subn


-Greedy vs Non-Greedy
non-greedy 문자인 ?를 사용하면 *의 탐욕을 제한할 수 있다.


